"""basic db structure

Revision ID: f4ca3a46b6c9
Revises: 
Create Date: 2025-08-13 10:31:53.523576

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f4ca3a46b6c9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_token_blacklist_token'), table_name='token_blacklist')
    op.drop_table('token_blacklist')
    op.create_unique_constraint(None, 'company', ['id'])
    op.create_unique_constraint(None, 'data_source', ['id'])
    op.create_unique_constraint(None, 'device', ['id'])
    op.create_unique_constraint(None, 'group', ['id'])
    op.create_unique_constraint(None, 'plc_brand', ['id'])
    op.create_unique_constraint(None, 'plc_type', ['id'])
    op.create_unique_constraint(None, 'product', ['id'])
    op.create_unique_constraint(None, 'product_group', ['id'])
    op.create_unique_constraint(None, 'rate_limit', ['id'])
    op.alter_column('smart_hardware', 'sync_status',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('smart_hardware', 'upgrade_status',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_unique_constraint(None, 'smart_hardware', ['id'])
    op.create_unique_constraint(None, 'smart_hardware_type', ['id'])
    op.create_unique_constraint(None, 'template', ['id'])
    op.create_unique_constraint(None, 'tier', ['id'])
    op.create_unique_constraint(None, 'variable', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'variable', type_='unique')
    op.drop_constraint(None, 'tier', type_='unique')
    op.drop_constraint(None, 'template', type_='unique')
    op.drop_constraint(None, 'smart_hardware_type', type_='unique')
    op.drop_constraint(None, 'smart_hardware', type_='unique')
    op.alter_column('smart_hardware', 'upgrade_status',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('smart_hardware', 'sync_status',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'rate_limit', type_='unique')
    op.drop_constraint(None, 'product_group', type_='unique')
    op.drop_constraint(None, 'product', type_='unique')
    op.drop_constraint(None, 'plc_type', type_='unique')
    op.drop_constraint(None, 'plc_brand', type_='unique')
    op.drop_constraint(None, 'group', type_='unique')
    op.drop_constraint(None, 'device', type_='unique')
    op.drop_constraint(None, 'data_source', type_='unique')
    op.drop_constraint(None, 'company', type_='unique')
    op.create_table('token_blacklist',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('token_blacklist_pkey'))
    )
    op.create_index(op.f('ix_token_blacklist_token'), 'token_blacklist', ['token'], unique=True)
    # ### end Alembic commands ###
